#tag ModuleProtected Module libgd	#tag Method, Flags = &h0		Sub BuildFontDict()		  Dim sh As New Shell		  Dim s, t(-1), u(-1) As String		  Dim i,j, k, n As Integer		  Dim d,fd As Dictionary		  		  fd=New Dictionary		  sh.Execute "ls /Library/Fonts/*.ttf"		  s=sh.Result.Trim()		  t=s.Split(ChrB(10))		  j=UBound(t)		  for i=0 to j		    s=TTFname(t(i)).Trim().ReplaceAllB(ChrB(10), "")		    u=s.Split(":")		    if UBound(u)>0 Then		      if fd.HasKey(u(0)) Then		        d=fd.Value(u(0))		      Else		        d=New Dictionary		      end if		      d.Value(u(1))=t(i)		      fd.Value(s)=d		    end if		  Next		  		  Print "-----------------------------------------"		  j=fd.Count-1		  Print Str(i)		  for i=0 to j		    k=d.Count-1		    s=fd.Key(i)		    d=fd.Value(s)		    Print s		    for n=0 to k		      Print "   * "+d.Key(n)+" ==> "+d.value(d.Key(n)).StringValue		    Next		  Next		  		Exception		  		  Print "-----------------------------------------"		  print s		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function TTFname(fp As String) As String		  // http://www.codeguru.com/cpp/g-m/gdi/fonthandlinganddetection/article.php/c3659/		  // http://www.microsoft.com/typography/otspec/name.htm		  '//This is the TTF file header		  'typedef struct _tagTT_OFFSET_TABLE{		  'USHORT  uMajorVersion;		  'USHORT  uMinorVersion;		  'USHORT  uNumOfTables;		  'USHORT  uSearchRange;		  'USHORT  uEntrySelector;		  'USHORT  uRangeShift;		  '}TT_OFFSET_TABLE;		  '		  '//Tables in the TTF file and their placement and name (tag)		  'typedef struct _tagTT_TABLE_DIRECTORY{		  'char  szTag[4];      //table name		  'ULONG uCheckSum;     //Check sum		  'ULONG uOffset;       //Offset from beginning of file		  'ULONG uLength;       //length of the table in bytes		  '}TT_TABLE_DIRECTORY;		  '		  '//Header of the names table		  'typedef struct _tagTT_NAME_TABLE_HEADER{		  'USHORT uFSelector;      //format selector. Always 0		  'USHORT uNRCount;        //Name Records count		  'USHORT uStorageOffset;  //Offset for strings storage, from		  '//start of the table		  '}TT_NAME_TABLE_HEADER;		  '		  '//Records in the names table		  'typedef struct _tagTT_NAME_RECORD{		  'USHORT uPlatformID;		  'USHORT uEncodingID;		  'USHORT uLanguageID;		  'USHORT uNameID;		  'USHORT uStringLength;		  'USHORT uStringOffset;    //from start of storage area		  '}TT_NAME_RECORD;		  		  Dim nameID As new Dictionary		  Dim f As FolderItem		  Dim bs As BinaryStream		  Dim header, ntHeader, ntRecord As MemoryBlock		  Dim uVersion, szTag, s As String		  Dim uNumOfTables, uSearchRange, uEntrySelector, uRangeShift, nPos As Integer		  Dim i, j, uCheckSum, uOffset, uLength, uFSelector, uNRCount, uStorageOffset, k, n As UInt32		  Dim uPlatformID, uEncodingID, uLanguageID, uNameID, uStringLength, uStringOffset As Integer		  		  f=GetFolderItem(fp, f.PathTypeShell)		  if Not f.Exists Then Return ""		  		  bs=BinaryStream.Open(f, False)		  if bs=Nil Then Return ""		  bs.LittleEndian=False		  		  header=bs.Read(12)		  header.LittleEndian=False		  Print "Version "+Str(header.UShort(0))+"."+Str(header.UShort(2))		  Print "NumOfTables "+Str(header.UShort(4))		  Print "SearchRange "+Str(header.UShort(6))		  Print "EntrySelector "+Str(header.UShort(8))		  Print "RangeShift "+Str(header.UShort(10))		  		  uVersion=Str(header.UShort(0))+"."+Str(header.UShort(2))		  uNumOfTables=header.UShort(4)		  uSearchRange=header.UShort(6)		  uEntrySelector=header.UShort(8)		  uRangeShift=header.UShort(10)		  		  j=uNumOfTables-1		  		  for i=0 to j		    header=bs.Read(16)		    header.LittleEndian=False		    szTag=header.StringValue(0,4)		    uCheckSum=header.UInt32Value(4)		    uOffset=header.UInt32Value(8)		    uLength=header.UInt32Value(12)		    		    if szTag="name" Then		      bs.Position=uOffset		      ntHeader=bs.Read(6)		      ntHeader.LittleEndian=False		      uFSelector=ntHeader.UShort(0)		      uNRCount=ntHeader.UShort(2)		      'Print "uNRCount = "+Str(uNRCount)		      uStorageOffset=ntHeader.UShort(4)		      k=uNRCount-1		      for n=0 to k		        ntRecord=bs.Read(12)		        ntRecord.LittleEndian=False		        uPlatformID=ntRecord.UShort(0)		        uEncodingID=ntRecord.UShort(2)		        uLanguageID=ntRecord.UShort(4)		        uNameID=ntRecord.UShort(6)		        uStringLength=ntRecord.UShort(8)		        uStringOffset=ntRecord.UShort(10)		        //from start of storage area		        nPos=bs.Position		        bs.Position=uOffset + uStringOffset + uStorageOffset		        s = ConvertEncoding(bs.Read(uStringLength), Encodings.UTF8)		        if uStringLength>0 Then		          if Not nameID.HasKey(uNameID) Then		            nameID.Value(uNameID)=s		          end if		        end if		        		        bs.Position=nPos		      next		      'Print "-----"		      'Print "Name("+fp+") = "+nameID.Value(1)+":"+nameID.Value(2)		      'Print "-----"		      Return nameID.Value(1)+":"+nameID.Value(2)		      		    end if		  next		  		  		End Function	#tag EndMethod	#tag Property, Flags = &h4		FontDict As Dictionary	#tag EndProperty	#tag Constant, Name = gdAntiAliased, Type = Integer, Dynamic = False, Default = \"-7", Scope = Public	#tag EndConstant	#tag Constant, Name = gdArc, Type = Integer, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = gdBrushed, Type = Integer, Dynamic = False, Default = \"-3", Scope = Public	#tag EndConstant	#tag Constant, Name = gdChord, Type = Integer, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = gdDashSize, Type = Integer, Dynamic = False, Default = \"4", Scope = Public	#tag EndConstant	#tag Constant, Name = gdEdged, Type = Integer, Dynamic = False, Default = \"4", Scope = Public	#tag EndConstant	#tag Constant, Name = gdMaxColors, Type = Integer, Dynamic = False, Default = \"256", Scope = Public	#tag EndConstant	#tag Constant, Name = gdNoFill, Type = Integer, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = gdPie, Type = Integer, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = gdStyled, Type = Integer, Dynamic = False, Default = \"-2", Scope = Public	#tag EndConstant	#tag Constant, Name = gdStyledBrushed, Type = Integer, Dynamic = False, Default = \"-4", Scope = Public	#tag EndConstant	#tag Constant, Name = gdTiled, Type = Integer, Dynamic = False, Default = \"-5", Scope = Public	#tag EndConstant	#tag Constant, Name = gdTransparent, Type = Integer, Dynamic = False, Default = \"-6", Scope = Public	#tag EndConstant	#tag Constant, Name = kGd2Image, Type = Integer, Dynamic = False, Default = \"5", Scope = Public	#tag EndConstant	#tag Constant, Name = kGdImage, Type = Integer, Dynamic = False, Default = \"4", Scope = Public	#tag EndConstant	#tag Constant, Name = kGifImage, Type = Integer, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = kJpegImage, Type = Integer, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = kPngImage, Type = Integer, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = kTiffImage, Type = Integer, Dynamic = False, Default = \"8", Scope = Public	#tag EndConstant	#tag Constant, Name = kWbmpImage, Type = Integer, Dynamic = False, Default = \"6", Scope = Public	#tag EndConstant	#tag Constant, Name = kXbmImage, Type = Integer, Dynamic = False, Default = \"3", Scope = Public	#tag EndConstant	#tag Constant, Name = kXpmImage, Type = Integer, Dynamic = False, Default = \"7", Scope = Public	#tag EndConstant	#tag Constant, Name = libgd, Type = String, Dynamic = False, Default = \"/usr/local/lib/libgd.dylib", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule